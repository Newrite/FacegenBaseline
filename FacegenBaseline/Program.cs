using System;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Order;
using Noggog;

namespace FacegenBaseline
{
    public class Program
    {
        static Lazy<Settings> _settings = null!;
        static public Settings settings => _settings.Value;

        private static IPatcherState<ISkyrimMod, ISkyrimModGetter>? _state;
        public static IPatcherState<ISkyrimMod, ISkyrimModGetter> PatcherState
        {
            get => _state!;
        }
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .SetTypicalOpen(GameRelease.SkyrimSE, "FacegenBaseline.esp")
                .SetAutogeneratedSettings("Settings", "settings.json", out _settings)
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            _state = state;
            ModKey baselineModKey = ModKey.FromNameAndExtension(settings.BaselineMod);
            if (!PatcherState.LoadOrder.TryGetValue(baselineModKey, out IModListing<ISkyrimModGetter>? baselineMod) || baselineMod == null || baselineMod.Mod == null)
            {
                throw new ArgumentException("{0} plugin not found in Load Order", settings.BaselineMod);
            }

            foreach (var baselineNPC in baselineMod.Mod.Npcs)
            {
                // we need to introspect the provenance of the record
                var contexts = state.LinkCache.ResolveAllContexts<INpc, INpcGetter>(baselineNPC.FormKey).ToList();
                var currentWinner = contexts[0];
                if (currentWinner.ModKey == baselineModKey)
                {
                    Console.WriteLine("Baseline is winning override for {0}/{1:X8}", baselineNPC.Name, baselineNPC.FormKey.ID);
                    continue;
                }
                // Compare winning override Head Parts with master - if this record is already overriding the appearance, we let it win
                var master = contexts.Last();
                var masterHDPTs = master.Record.HeadParts.Select(s => s.TryResolve<IHeadPartGetter>(state.LinkCache)).ToHashSet();
                var winnerHDPTs = currentWinner.Record.HeadParts.Select(s => s.TryResolve<IHeadPartGetter>(state.LinkCache)).ToHashSet();
                if (masterHDPTs.SetEquals(winnerHDPTs))
                {
                    Console.WriteLine("Baseline appearance used for {0}/{1:X8}", baselineNPC.Name, baselineNPC.FormKey.ID);
                    UseBaselineAppearance(baselineNPC, currentWinner.Record);
                }
                else
                {
                    Console.WriteLine("Appearance for {0}/{1:X8} provided by {2}", baselineNPC.Name, baselineNPC.FormKey.ID, currentWinner.ModKey.FileName);
                }
            }
        }

        private static void UseBaselineAppearance(INpcGetter baselineNPC, INpcGetter currentWinner)
        {
            // forward appearance, with acknowledgement to https://github.com/Piranha91/NPC-Plugin-Chooser
            var synthesisNpc = PatcherState.PatchMod.Npcs.GetOrAddAsOverride(currentWinner);

            synthesisNpc.FaceMorph = baselineNPC.FaceMorph?.DeepCopy();

            synthesisNpc.FaceParts = baselineNPC.FaceParts?.DeepCopy();

            synthesisNpc.FarAwayModel.SetTo(baselineNPC.FarAwayModel);

            synthesisNpc.HairColor.SetTo(baselineNPC.HairColor);

            synthesisNpc.HeadParts.Clear();
            synthesisNpc.HeadParts.AddRange(baselineNPC.HeadParts);

            synthesisNpc.HeadTexture.SetTo(baselineNPC.HeadTexture);

            synthesisNpc.Height = baselineNPC.Height;

            synthesisNpc.Race.SetTo(baselineNPC.Race);

            synthesisNpc.TextureLighting = baselineNPC.TextureLighting;

            synthesisNpc.TintLayers.Clear();
            synthesisNpc.TintLayers.AddRange(baselineNPC.TintLayers.Select(a => a.DeepCopy()));

            synthesisNpc.Weight = baselineNPC.Weight;

            synthesisNpc.WornArmor.SetTo(baselineNPC.WornArmor);
        }
    }
}
